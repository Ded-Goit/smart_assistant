import { NextResponse } from "next/server";

const HF_MODEL = "gpt2"; // –º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —ñ–Ω—à—É Hugging Face –º–æ–¥–µ–ª—å

export async function POST(req: Request) {
  const { prompt } = await req.json();

  // 1. –Ø–∫—â–æ —î –∫–ª—é—á OpenAI ‚Üí –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
  if (process.env.OPENAI_API_KEY) {
    try {
      const response = await fetch(
        "https://api.openai.com/v1/chat/completions",
        {
          headers: {
            Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
            "Content-Type": "application/json",
          },
          method: "POST",
          body: JSON.stringify({
            model: "gpt-4o-mini",
            messages: [{ role: "user", content: prompt }],
            max_tokens: 150,
          }),
        }
      );

      if (!response.ok) {
        return NextResponse.json(
          { error: "OpenAI API error" },
          { status: response.status }
        );
      }

      const data = await response.json();
      return NextResponse.json({
        result:
          data.choices[0]?.message?.content ??
          "ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–∞",
        provider: "OpenAI",
      });
    } catch (err) {
      console.error(err);
      return NextResponse.json(
        { error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ OpenAI API" },
        { status: 500 }
      );
    }
  }

  // 2. –Ø–∫—â–æ –Ω–µ–º–∞—î OpenAI ‚Üí fallback –Ω–∞ Hugging Face
  if (process.env.HF_API_KEY) {
    try {
      const response = await fetch(
        `https://api-inference.huggingface.co/models/${HF_MODEL}`,
        {
          headers: {
            Authorization: `Bearer ${process.env.HF_API_KEY}`,
            "Content-Type": "application/json",
          },
          method: "POST",
          body: JSON.stringify({ inputs: prompt }),
        }
      );

      if (!response.ok) {
        return NextResponse.json(
          { error: "HuggingFace API error" },
          { status: response.status }
        );
      }

      const data = await response.json();
      return NextResponse.json({
        result:
          data[0]?.generated_text ?? "ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ HuggingFace –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–∞",
        provider: "HuggingFace",
      });
    } catch (err) {
      console.error(err);
      return NextResponse.json(
        { error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ HuggingFace API" },
        { status: 500 }
      );
    }
  }

  return NextResponse.json(
    { error: "–ù–µ–º–∞—î API –∫–ª—é—á—ñ–≤ –¥–ª—è OpenAI —á–∏ HuggingFace" },
    { status: 400 }
  );
}
